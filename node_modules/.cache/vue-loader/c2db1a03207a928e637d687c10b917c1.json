{"remainingRequest":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\src\\views\\system\\dict\\data.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\src\\views\\system\\dict\\data.vue","mtime":1605154529082},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGxpc3RGb3JQYWdlLCBhZGREaWN0RGF0YSwgdXBkYXRlRGljdERhdGEsIGRlbGV0ZURpY3REYXRhQnlJZHMsIGdldERpY3REYXRhQnlJZCB9IGZyb20gJ0AvYXBpL3N5c3RlbS9kaWN0L2RhdGEnCmltcG9ydCB7IGdldERpY3RUeXBlQnlJZCwgc2VsZWN0QWxsRGljdFR5cGUgfSBmcm9tICdAL2FwaS9zeXN0ZW0vZGljdC90eXBlJwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0RhdGEnLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICAvLyDpga7nvanlsYIKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgIC8vIOaVsOaNruWIl+ihqOmmluWIl++8jOWLvumAieeahGlk6ZuG5ZCICiAgICAgIGlkczogW10sCiAgICAgIC8vIOmdnuWNleS4quemgeeUqAogICAgICBzaW5nbGU6IHRydWUsCiAgICAgIC8vIOmdnuWkmuS4quemgeeUqAogICAgICBtdWx0aXBsZTogdHJ1ZSwKICAgICAgLy8g5oC75p2h5pWwCiAgICAgIHRvdGFsOiAwLAogICAgICAvLyDlrZflhbjmlbDmja7ooajmoLzmlbDmja4KICAgICAgZGljdERhdGFUYWJsZUxpc3Q6IFtdLAogICAgICAvLyDlvLnlh7rlsYLmoIfpopgKICAgICAgdGl0bGU6ICcnLAogICAgICAvLyDmmK/lkKbmmL7npLrlvLnlh7rlsYIKICAgICAgb3BlbjogZmFsc2UsCiAgICAgIC8vIOeKtuaAgeaVsOaNruWtl+WFuAogICAgICBzdGF0dXNPcHRpb25zOiBbXSwKICAgICAgLy8g5omA5pyJ5a2X5YW457G75Z6L5pWw5o2uCiAgICAgIGRpY3RUeXBlT3B0aW9uczogW10sCiAgICAgIC8vIOm7mOiupOafpeivoueahOexu+Weiyzngrnlh7vmn5DkuKrlrZflhbjnsbvlnovov5vlhaXliLDnsbvlnovor6bmg4XpobXpnaLkuK3vvIzkvJrlnKjmn6Xor6LmnaHku7bkuK3pu5jorqTpgInkuK3or6XlrZflhbjnsbvlnosKICAgICAgLy8g5a+55p+l6K+i5Y+C5pWw5Lit5a+55bqU5a2X5YW457G75Z6L6L+b6KGM57uR5a6a5Y2z5Y+v77yMY3JlYXRlZOaWueazleS4rQogICAgICAvLyBkZWZhdWx0RGljdFR5cGU6IHVuZGVmaW5lZCwKICAgICAgLy8g5p+l6K+i5Y+C5pWwCiAgICAgIHF1ZXJ5UGFyYW1zOiB7CiAgICAgICAgcGFnZU51bTogMSwKICAgICAgICBwYWdlU2l6ZTogMTAsCiAgICAgICAgZGljdExhYmVsOiB1bmRlZmluZWQsIC8vIOWtl+WFuOaVsOaNruWAvO+8iOS4reaWh++8iQogICAgICAgIGRpY3RUeXBlOiB1bmRlZmluZWQsIC8vIOaJgOWxnueahOWtl+WFuOexu+WeiwogICAgICAgIHN0YXR1czogdW5kZWZpbmVkIC8vIOeKtuaAgQogICAgICB9LAogICAgICAvLyDooajljZXmlbDmja7vvIjmlrDlop7lkozkv67mlLnmqKHmgIHmoYbvvIkKICAgICAgZm9ybToge30sCiAgICAgIC8vIOihqOWNleagoemqjAogICAgICBydWxlczogewogICAgICAgIGRpY3RMYWJlbDogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogJ+aVsOaNruagh+etvuS4jeiDveS4uuepuicsIHRyaWdnZXI6ICdibHVyJyB9CiAgICAgICAgXSwKICAgICAgICBkaWN0VmFsdWU6IFsKICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfmlbDmja7plK7lgLzkuI3og73kuLrnqbonLCB0cmlnZ2VyOiAnYmx1cicgfQogICAgICAgIF0KICAgICAgfQogICAgfQogIH0sCiAgLy8g55Sf5ZG95ZGo5pyfLOmSqeWtkOWHveaVsCAg5Zyo5a6e5L6L5Yib5bu65a6M5oiQ5ZCO6KKr56uL5Y2z6LCD55SoCiAgY3JlYXRlZCgpIHsKICAgIC8vIOWKoOi9vemhtemdouaXtizpnIDopoHov5vooYzliJ3lp4vljJbmlbDmja4s6LCD55So5p+l6K+i5pWw5o2u5YiX6KGo55qE5pa55rOVCiAgICB0aGlzLmdldERpY3REYXRhTGlzdCgpCiAgICAvLyDkvb/nlKjlhajlsYDnmoTmoLnmja7lrZflhbjnsbvlnovmn6Xor6LlrZflhbjmlbDmja7nmoTmlrnms5XmnaXojrflj5bmn6Xor6LmnaHku7bkuK3nmoTnirbmgIHkv6Hmga8KICAgIHRoaXMuZ2V0RGF0YUJ5VHlwZSgnc3lzX25vcm1hbF9kaXNhYmxlJykudGhlbihyZXMgPT4gewogICAgICAvLyDlsIbmn6Xor6LliLDnmoTnirbmgIHkv6Hmga/kv53lrZjliLDlvZPliY3pobXpnaLlr7nlupTnmoTlsZ7mgKfkuK0KICAgICAgdGhpcy5zdGF0dXNPcHRpb25zID0gcmVzLmRhdGEKICAgIH0pCiAgICAvLyDov5vlhaXor6XpobXpnaLml7bvvIzkvJrlnKjot6/nlLHkuK3mkLrluKbmiYDngrnlh7vnmoTlrZflhbjnsbvlnotpZO+8jOWPr+S7peagueaNruatpOadpei/m+ihjOaYvuekuum7mOiupOWGheWuue+8jOW5tuS4lOWcqOafpeivouadoeS7tuS4reWtl+WFuOexu+Wei+S4i+aLieahhum7mOiupOmAieS4reWvueW6lOexu+WeiwogICAgLy8ganPliKnnlKh8fCDmiJbogIUgJiYg566A5L6/6LWL5YC85pa55byPCiAgICBjb25zdCBkaWN0SWQgPSB0aGlzLiRyb3V0ZS5wYXJhbXMgJiYgdGhpcy4kcm91dGUucGFyYW1zLmRpY3RJZCAvLyDot6/nlLHkvKDlj4IKICAgIC8vIOagueaNruWtl+WFuOexu+Wei2lk6I635Y+W5a+55bqU55qE5a2X5YW457G75Z6LLOS4uuS6huWcqOafpeivouadoeS7tuS4reeahOWtl+WFuOexu+Wei+S4rei/m+ihjOm7mOiupOmAieS4rQogICAgZ2V0RGljdFR5cGVCeUlkKGRpY3RJZCkudGhlbihyZXMgPT4gewogICAgICAvLyDkv53lrZjmn6Xor6LliLDnmoTnirbmgIHkv6Hmga8KICAgICAgLy8gdGhpcy5kZWZhdWx0RGljdFR5cGUgPSByZXMuZGF0YS5kaWN0VHlwZQogICAgICAvLyDkuIvmi4nmoYbkuK3pu5jorqTpgInkuK0KICAgICAgdGhpcy5xdWVyeVBhcmFtcy5kaWN0VHlwZSA9IHJlcy5kYXRhLmRpY3RUeXBlCiAgICB9KQogICAgLy8g5p+l6K+i5omA5pyJ55qE5a2X5YW457G75Z6L77yM5aGr5YWF5Zyo5p+l6K+i5p2h5Lu25Lit55qE5a2X5YW457G75Z6L5LiL5ouJ5qGG5YaFCiAgICBzZWxlY3RBbGxEaWN0VHlwZSgpLnRoZW4ocmVzID0+IHsKICAgICAgLy8g5L+d5a2Y5omA5pyJ5a2X5YW457G75Z6L5pWw5o2uCiAgICAgIHRoaXMuZGljdFR5cGVPcHRpb25zID0gcmVzLmRhdGEKICAgIH0pCiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyDmn6Xor6LmlbDmja7liJfooajmlbDmja4KICAgIGdldERpY3REYXRhTGlzdCgpIHsKICAgICAgLy8g5omT5byA6YGu572pCiAgICAgIHRoaXMubG9hZGluZyA9IHRydWUKICAgICAgLy8g6LCD55So5YiG6aG15p+l6K+i55qEYXBp5pa55rOVCiAgICAgIGxpc3RGb3JQYWdlKHRoaXMucXVlcnlQYXJhbXMpLnRoZW4ocmVzID0+IHsKICAgICAgICAvLyDlsIbliIbpobXmlbDmja7kvKDpgJLnu5nmlbDmja7nsbvooajnu5HlrprnmoRkYXRh5pWw5o2uCiAgICAgICAgdGhpcy5kaWN0RGF0YVRhYmxlTGlzdCA9IHJlcy5kYXRhCiAgICAgICAgLy8g5p+l6K+i5Yiw5pWw5o2u5LqGLOWwseimgeaYvuekuuWIhumhteS6hgogICAgICAgIHRoaXMudG90YWwgPSByZXMudG90YWwKICAgICAgICAvLyDlhbPpl63pga7nvakKICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZQogICAgICB9KQogICAgfSwKICAgIC8vIOafpeivouaTjeS9nAogICAgaGFuZGxlUXVlcnkoKSB7CiAgICAgIC8vIOaJp+ihjOWunumZheeahOafpeivouaWueazlQogICAgICAvLyDlm6DkuLrovpPlhaXnmoTmn6Xor6LmnaHku7blrp7ml7bkuI5xdWVyeVBhcmFtc+WKqOaAgee7keWumgogICAgICB0aGlzLmdldERpY3REYXRhTGlzdCgpCiAgICB9LAogICAgLy8g5riF56m65p+l6K+i5p2h5Lu25pON5L2cCiAgICByZXNldFF1ZXJ5KCkgewogICAgICAvLyDmuIXnqbrmn6Xor6LmlbDmja4KICAgICAgdGhpcy5yZXNldEZvcm0oJ3F1ZXJ5Rm9ybScpCiAgICAgIC8vIOmHjeaWsOafpeivouaVsOaNruWIl+ihqCznm7jlvZPkuo7miafooYzkuIDmrKHml6Dmn6Xor6LmnaHku7bnmoTmn6Xor6Lmk43kvZws5aaC5p6c5LiN6LCD55So6L+Z5Liq5pa55rOVLOmCo+S5iOa4heepuuaTjeS9nOWQjizmlbDmja7liJfooajkuI3kvJrlkIzmraXmlLnlj5gKICAgICAgdGhpcy5nZXREaWN0RGF0YUxpc3QoKQogICAgfQogIH0KfQo="},{"version":3,"sources":["data.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"data.vue","sourceRoot":"src/views/system/dict","sourcesContent":["<!--字典数据页面-->\n<template>\n  <div class=\"app-container\">\n    <!--查询条件开始-->\n    <!--\n      ref:\n      model:绑定查询条件部分的数据绑定,与queryParams有关,点击查询按钮时,将查询参数传递到后台\n      inline:变为行内域\n      label-width:设置每个标签的宽度,指定在el-form上时,其直接子标签form-item会继承该值\n    -->\n    <el-form ref=\"queryForm\" :model=\"queryParams\" :inline=\"true\" label-width=\"68px\">\n      <el-form-item label=\"字典类型\" prop=\"dictType\">\n        <!--input输入框\n          v-model:指定与queryParams中哪个属性进行动态绑定\n          placeholder:输入框内默认填充的数据,获得焦点后消失\n          clearable:是否可以一键清除\n          size:输入框大小,影响内容大小\n        -->\n        <!--select下拉框-->\n        <el-select\n          v-model=\"queryParams.dictType\"\n          placeholder=\"请选择字典类型\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        >\n          <!--下拉框内容,遍历dictTypeOptions属性,这里面保存了查询到的所有的字典类型数据\n            key:唯一标注\n            label:标签\n            value:实际存储的值\n          -->\n          <el-option\n            v-for=\"dict in dictTypeOptions\"\n            :key=\"dict.dictType\"\n            :label=\"dict.dictName\"\n            :value=\"dict.dictType\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"字典标签\" prop=\"dictLabel\">\n        <el-input\n          v-model=\"queryParams.dictLabel\"\n          placeholder=\"请输入字典标签\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        />\n      </el-form-item>\n      <el-form-item label=\"状态\" prop=\"status\">\n        <!--select下拉框-->\n        <el-select\n          v-model=\"queryParams.status\"\n          placeholder=\"字典状态\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        >\n          <!--下拉框内容,遍历statusOptions属性,这里面保存了查询的状态的码表\n            key:唯一标注\n            label:标签\n            value:实际存储的值\n          -->\n          <el-option\n            v-for=\"dict in statusOptions\"\n            :key=\"dict.dictValue\"\n            :label=\"dict.dictLabel\"\n            :value=\"dict.dictValue\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item>\n        <!--查询和清空按钮-->\n        <el-button type=\"primary\" icon=\"el-icon-search\" size=\"mini\" @click=\"handleQuery\">查询</el-button>\n        <el-button type=\"primary\" icon=\"el-icon-refresh\" size=\"mini\" @click=\"resetQuery\">清空</el-button>\n      </el-form-item>\n    </el-form>\n    <!--查询条件结束-->\n    <!--操作栏按钮开始-->\n    <!--操作栏按钮结束-->\n    <!--数据列表开始-->\n    <!--数据列表结束-->\n    <!--分页控件开始-->\n    <!--分页控件结束-->\n    <!--新增和修改模态框开始-->\n    <!--新增和修改模态框结束-->\n  </div>\n</template>\n\n<script>\nimport { listForPage, addDictData, updateDictData, deleteDictDataByIds, getDictDataById } from '@/api/system/dict/data'\nimport { getDictTypeById, selectAllDictType } from '@/api/system/dict/type'\nexport default {\n  name: 'Data',\n  data() {\n    return {\n      // 遮罩层\n      loading: false,\n      // 数据列表首列，勾选的id集合\n      ids: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 总条数\n      total: 0,\n      // 字典数据表格数据\n      dictDataTableList: [],\n      // 弹出层标题\n      title: '',\n      // 是否显示弹出层\n      open: false,\n      // 状态数据字典\n      statusOptions: [],\n      // 所有字典类型数据\n      dictTypeOptions: [],\n      // 默认查询的类型,点击某个字典类型进入到类型详情页面中，会在查询条件中默认选中该字典类型\n      // 对查询参数中对应字典类型进行绑定即可，created方法中\n      // defaultDictType: undefined,\n      // 查询参数\n      queryParams: {\n        pageNum: 1,\n        pageSize: 10,\n        dictLabel: undefined, // 字典数据值（中文）\n        dictType: undefined, // 所属的字典类型\n        status: undefined // 状态\n      },\n      // 表单数据（新增和修改模态框）\n      form: {},\n      // 表单校验\n      rules: {\n        dictLabel: [\n          { required: true, message: '数据标签不能为空', trigger: 'blur' }\n        ],\n        dictValue: [\n          { required: true, message: '数据键值不能为空', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  // 生命周期,钩子函数  在实例创建完成后被立即调用\n  created() {\n    // 加载页面时,需要进行初始化数据,调用查询数据列表的方法\n    this.getDictDataList()\n    // 使用全局的根据字典类型查询字典数据的方法来获取查询条件中的状态信息\n    this.getDataByType('sys_normal_disable').then(res => {\n      // 将查询到的状态信息保存到当前页面对应的属性中\n      this.statusOptions = res.data\n    })\n    // 进入该页面时，会在路由中携带所点击的字典类型id，可以根据此来进行显示默认内容，并且在查询条件中字典类型下拉框默认选中对应类型\n    // js利用|| 或者 && 简便赋值方式\n    const dictId = this.$route.params && this.$route.params.dictId // 路由传参\n    // 根据字典类型id获取对应的字典类型,为了在查询条件中的字典类型中进行默认选中\n    getDictTypeById(dictId).then(res => {\n      // 保存查询到的状态信息\n      // this.defaultDictType = res.data.dictType\n      // 下拉框中默认选中\n      this.queryParams.dictType = res.data.dictType\n    })\n    // 查询所有的字典类型，填充在查询条件中的字典类型下拉框内\n    selectAllDictType().then(res => {\n      // 保存所有字典类型数据\n      this.dictTypeOptions = res.data\n    })\n  },\n  methods: {\n    // 查询数据列表数据\n    getDictDataList() {\n      // 打开遮罩\n      this.loading = true\n      // 调用分页查询的api方法\n      listForPage(this.queryParams).then(res => {\n        // 将分页数据传递给数据类表绑定的data数据\n        this.dictDataTableList = res.data\n        // 查询到数据了,就要显示分页了\n        this.total = res.total\n        // 关闭遮罩\n        this.loading = false\n      })\n    },\n    // 查询操作\n    handleQuery() {\n      // 执行实际的查询方法\n      // 因为输入的查询条件实时与queryParams动态绑定\n      this.getDictDataList()\n    },\n    // 清空查询条件操作\n    resetQuery() {\n      // 清空查询数据\n      this.resetForm('queryForm')\n      // 重新查询数据列表,相当于执行一次无查询条件的查询操作,如果不调用这个方法,那么清空操作后,数据列表不会同步改变\n      this.getDictDataList()\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]}]}