{"remainingRequest":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\src\\views\\system\\dict\\data.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\src\\views\\system\\dict\\data.vue","mtime":1605330930155},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["data.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"data.vue","sourceRoot":"src/views/system/dict","sourcesContent":["<!--字典数据页面-->\n<template>\n  <div class=\"app-container\">\n    <!--查询条件开始-->\n    <!--\n      ref:\n      model:绑定查询条件部分的数据绑定,与queryParams有关,点击查询按钮时,将查询参数传递到后台\n      inline:变为行内域\n      label-width:设置每个标签的宽度,指定在el-form上时,其直接子标签form-item会继承该值\n    -->\n    <el-form ref=\"queryForm\" :model=\"queryParams\" :inline=\"true\" label-width=\"68px\">\n      <el-form-item label=\"字典类型\" prop=\"dictType\">\n        <!--input输入框\n          v-model:指定与queryParams中哪个属性进行动态绑定\n          placeholder:输入框内默认填充的数据,获得焦点后消失\n          clearable:是否可以一键清除\n          size:输入框大小,影响内容大小\n        -->\n        <!--select下拉框-->\n        <el-select\n          v-model=\"queryParams.dictType\"\n          placeholder=\"请选择字典类型\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        >\n          <!--下拉框内容,遍历dictTypeOptions属性,这里面保存了查询到的所有的字典类型数据\n            key:唯一标注\n            label:标签\n            value:实际存储的值\n          -->\n          <el-option\n            v-for=\"dict in dictTypeOptions\"\n            :key=\"dict.dictType\"\n            :label=\"dict.dictName\"\n            :value=\"dict.dictType\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"字典标签\" prop=\"dictLabel\">\n        <el-input\n          v-model=\"queryParams.dictLabel\"\n          placeholder=\"请输入字典标签\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        />\n      </el-form-item>\n      <el-form-item label=\"状态\" prop=\"status\">\n        <!--select下拉框-->\n        <el-select\n          v-model=\"queryParams.status\"\n          placeholder=\"字典状态\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        >\n          <!--下拉框内容,遍历statusOptions属性,这里面保存了查询的状态的码表\n            key:唯一标注\n            label:标签\n            value:实际存储的值\n          -->\n          <el-option\n            v-for=\"dict in statusOptions\"\n            :key=\"dict.dictValue\"\n            :label=\"dict.dictLabel\"\n            :value=\"dict.dictValue\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item>\n        <!--查询和清空按钮-->\n        <el-button type=\"primary\" icon=\"el-icon-search\" size=\"mini\" @click=\"handleQuery\">查询</el-button>\n        <el-button type=\"primary\" icon=\"el-icon-refresh\" size=\"mini\" @click=\"resetQuery\">清空</el-button>\n      </el-form-item>\n    </el-form>\n    <!--查询条件结束-->\n    <!--操作栏按钮开始-->\n    <el-row :gutter=\"10\" style=\"margin-bottom: 8px;\">\n      <!--el-col:表示一列\n        span:指定该列所占的宽度,最大指定为24\n      -->\n      <el-col :span=\"1.5\">\n        <!--新增按钮:尺寸mini-->\n        <el-button type=\"primary\" icon=\"el-icon-plus\" size=\"mini\" @click=\"handleAdd\">新增</el-button>\n      </el-col>\n      <el-col :span=\"1.5\">\n        <!--修改按钮:只有在选中一条记录的时候,才会处于可用状态-->\n        <el-button type=\"success\" icon=\"el-icon-edit\" size=\"mini\" :disabled=\"!single\" @click=\"handleUpdate\">修改</el-button>\n      </el-col>\n      <el-col :span=\"1.5\">\n        <!--删除按钮,只要有选中数据就可用,不管一条还是多条-->\n        <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" :disabled=\"!multiple\" @click=\"handleDelete\">批量删除</el-button>\n      </el-col>\n    </el-row>\n    <!--操作栏按钮结束-->\n    <!--数据列表开始-->\n    <el-table v-loading=\"loading\" border :data=\"dictDataTableList\" @selection-change=\"handleSelectionChnage\">\n      <!--el-table-column:每一行中的每一列\n        prop:对应从:data中取出的数据\n        align:对齐方式\n        label:列名\n        show-overflow-tooltip:默认情况下数据过长不够显示的时候是换行显示,如果需要单行显示,可以使用这个,并且当鼠标移动到此处时会显示实际内容的提示信息\n      -->\n      <el-table-column type=\"selection\" width=\"55\" align=\"center\" />\n      <el-table-column label=\"字典编码\" prop=\"dictCode\" align=\"center\" />\n      <el-table-column label=\"字典标签\" prop=\"dictLabel\" align=\"center\" />\n      <el-table-column label=\"字典键值\" prop=\"dictValue\" align=\"center\" />\n      <el-table-column label=\"字典排序\" prop=\"dictSort\" align=\"center\" />\n      <!--formatter:用于按照指定要求来格式化此处需要显示的值,显示在列表中的数据是经过statusFormatter处理后的内容-->\n      <el-table-column label=\"状态\" prop=\"status\" align=\"center\" :formatter=\"statusFormatter\" />\n      <el-table-column label=\"备注\" prop=\"remark\" align=\"center\" :show-overflow-tooltip=\"true\" />\n      <el-table-column label=\"创建时间\" prop=\"createTime\" align=\"center\" width=\"180\" />\n      <el-table-column label=\"操作\" align=\"center\">\n        <!--字典类型  slot-scope=\"scope\" 来取得作用域插槽:data绑定的数据-->\n        <template slot-scope=\"scope\">\n          <!--传递该条数据到具体处理方法中-->\n          <el-button type=\"text\" icon=\"el-icon-edit\" size=\"mini\" @click=\"handleUpdate(scope.row)\">修改</el-button>\n          <el-button type=\"text\" icon=\"el-icon-delete\" size=\"mini\" @click=\"handleDelete(scope.row)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <!--数据列表结束-->\n    <!--分页控件开始-->\n    <el-pagination\n      v-show=\"total>0\"\n      :current-page=\"queryParams.pageNum\"\n      :page-sizes=\"[5, 10, 20, 30]\"\n      :page-size=\"queryParams.pageSize\"\n      layout=\"total, sizes, prev, pager, next, jumper\"\n      :total=\"total\"\n      @size-change=\"handleSizeChange\"\n      @current-change=\"handleCurrentChange\"\n    />\n    <!--分页控件结束-->\n    <!--新增和修改模态框开始-->\n    <el-dialog\n      :title=\"title\"\n      :visible.sync=\"open\"\n      width=\"500px\"\n      center\n      append-to-body\n    >\n      <el-form ref=\"form\" :model=\"form\" :rules=\"rules\" label-width=\"80px\">\n        <el-form-item label=\"字典类型\" prop=\"dictType\">\n          <el-input v-model=\"form.dictType\" :disabled=\"true\" size=\"small\" />\n        </el-form-item>\n        <el-form-item label=\"数据标签\" prop=\"dictLabel\">\n          <el-input v-model=\"form.dictLabel\" placeholder=\"请输入数据标签\" clearable size=\"small\" />\n        </el-form-item>\n        <el-form-item label=\"数据键值\" prop=\"dictValue\">\n          <el-input v-model=\"form.dictValue\" placeholder=\"请输入数据键值\" clearable size=\"small\" />\n        </el-form-item>\n        <el-form-item label=\"排序显示\" prop=\"dictSort\">\n          <!--el-input-number\n              计数器 这里设置了最小为0，低于0之后无法减少\n              步进为1\n          -->\n          <el-input-number v-model=\"form.dictSort\" placeholder=\"请输入数据键值\" clearable size=\"small\" :min=\"0\" />\n        </el-form-item>\n        <el-form-item label=\"状态\" prop=\"status\">\n          <el-radio-group v-model=\"form.status\">\n            <el-radio\n              v-for=\"dict in statusOptions\"\n              :key=\"dict.dictValue\"\n              :label=\"dict.dictValue\"\n              :value=\"dict.dictValue\"\n            >{{ dict.dictLabel }}</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"备注\" prop=\"remark\">\n          <el-input v-model=\"form.remark\" type=\"textarea\" placeholder=\"请输入字典备注\" clearable size=\"small\" />\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"handleSubmit\">确 定</el-button>\n        <el-button @click=\"cancel\">取 消</el-button>\n      </span>\n    </el-dialog>\n    <!--新增和修改模态框结束-->\n  </div>\n</template>\n\n<script>\nimport { listForPage, addDictData, updateDictData, deleteDictDataByIds, getDictDataById } from '@/api/system/dict/data'\nimport {\n  addDictType,\n  deleteDictTypeByIds,\n  getDictTypeById,\n  selectAllDictType,\n  updateDictType\n} from '@/api/system/dict/type'\nexport default {\n  name: 'Data',\n  data() {\n    return {\n      // 遮罩层\n      loading: false,\n      // 数据列表首列，勾选的id集合\n      ids: [],\n      // 非单个禁用\n      single: false,\n      // 非多个禁用\n      multiple: false,\n      // 总条数\n      total: 0,\n      // 字典数据表格数据\n      dictDataTableList: [],\n      // 弹出层标题\n      title: '',\n      // 是否显示弹出层\n      open: false,\n      // 状态数据字典\n      statusOptions: [],\n      // 所有字典类型数据\n      dictTypeOptions: [],\n      // 默认查询的类型,点击某个字典类型进入到类型详情页面中，会在查询条件中默认选中该字典类型\n      defaultDictType: undefined,\n      // 查询参数\n      queryParams: {\n        pageNum: 1,\n        pageSize: 10,\n        dictLabel: undefined, // 字典数据值（中文）\n        dictType: undefined, // 所属的字典类型\n        status: undefined // 状态\n      },\n      // 表单数据（新增和修改模态框）\n      form: {},\n      // 表单校验\n      rules: {\n        dictLabel: [\n          { required: true, message: '数据标签不能为空', trigger: 'blur' }\n        ],\n        dictValue: [\n          { required: true, message: '数据键值不能为空', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  // 生命周期,钩子函数  在实例创建完成后被立即调用\n  created() {\n    // 加载页面时,需要进行初始化数据,调用查询数据列表的方法\n    // 查询操作不能放在最开始，因为查询条件中默认要选中点击进入时的字典类型，所以加载页面时的查询应该是查询指定字典类型的对应字典数据，应该往后放\n    // this.getDictDataList()\n    // 使用全局的根据字典类型查询字典数据的方法来获取查询条件中的状态信息\n    this.getDataByType('sys_normal_disable').then(res => {\n      // 将查询到的状态信息保存到当前页面对应的属性中\n      this.statusOptions = res.data\n    })\n    // 进入该页面时，会在路由中携带所点击的字典类型id，可以根据此来进行显示默认内容，并且在查询条件中字典类型下拉框默认选中对应类型\n    // js利用|| 或者 && 简便赋值方式\n    const dictId = this.$route.params && this.$route.params.dictId // 路由传参\n    // 根据字典类型id获取对应的字典类型,为了在查询条件中的字典类型中进行默认选中\n    getDictTypeById(dictId).then(res => {\n      // 保存查询到的字典类型\n      this.defaultDictType = res.data.dictType\n      // 下拉框中默认选中\n      this.queryParams.dictType = res.data.dictType\n    })\n    // 查询所有的字典类型，填充在查询条件中的字典类型下拉框内\n    selectAllDictType().then(res => {\n      // 保存所有字典类型数据\n      this.dictTypeOptions = res.data\n      // 加载数据，对应字典类型的数据\n      this.getDictDataList()\n    })\n  },\n  methods: {\n    // 查询数据列表数据\n    getDictDataList() {\n      // 打开遮罩\n      this.loading = true\n      // 调用分页查询的api方法\n      listForPage(this.queryParams).then(res => {\n        // 将分页数据传递给数据类表绑定的data数据\n        this.dictDataTableList = res.data\n        // 查询到数据了,就要显示分页了\n        this.total = res.total\n        // 关闭遮罩\n        this.loading = false\n      })\n    },\n    // 查询操作\n    handleQuery() {\n      // 执行实际的查询方法\n      // 因为输入的查询条件实时与queryParams动态绑定\n      this.getDictDataList()\n    },\n    // 清空查询条件操作\n    resetQuery() {\n      // 清空查询数据\n      this.resetForm('queryForm')\n      // 重新查询数据列表,相当于执行一次无查询条件的查询操作,如果不调用这个方法,那么清空操作后,数据列表不会同步改变\n      this.getDictDataList()\n    },\n    // 添加操作,打开添加模态框\n    handleAdd() {\n      // 打开模态框\n      this.open = true\n      // 重置表单   重新初始化值并清空校验提示\n      this.reset()\n      // 上下两步顺序不能反，先重置后赋值\n      // 设置字典类型默认选中的值\n      this.form.dictType = this.defaultDictType\n    },\n    // 修改操作,打开修改模态框\n    handleUpdate(row) {\n      // 如果是点击数据列表上方的修改按钮时，是不会传递row数据的\n      // 如果是点击每行记录后面的修改链接时可以拿到row数据\n      // 如果row.dictCode为undefined，那么就表示点击的是修改按钮，因此要ids的第一个数据就是选中的要修改的数据\n      // 然后将该dictId作为查询条件向后台发送请求即可\n      // const dictCode = row.dictCode === undefined ? this.ids[0] : row.dictCode\n      // 下面这种方式，如果是点击修改按钮得到的数据，那么dictId是一个仅有一个值的数组，传递到后台也可以匹配参数\n      // js利用|| 或者 && 简便赋值方式\n      const dictCode = row.dictCode || this.ids\n      // 打开模态框\n      this.open = true\n      // 重置表单\n      this.reset()\n      // 根据id查询对应字典类型，并填充到form中\n      // 这里通过id查询到的数据是一整条数据，填充到了form中，并不影响\n      // getDictDataById(row.dictId).then(res => {\n      getDictDataById(dictCode).then(res => {\n        this.form = res.data\n      })\n      // 优化点，row已经是一整条数据了，为啥还要走后台查询呢？\n      // this.form = row\n    },\n    // 删除操作(含批量)\n    handleDelete(row) {\n      // 根据row.dictId是否为undefined来判断是批量删除还是单个删除\n      // const dictId = row.dictId === undefined ? this.ids : row.dictId\n      // const dictId = row.dictId === undefined ? this.ids[0] : row.dictId\n      // 下面这种方式，如果是点击删除按钮得到的数据，那么dictId是一个含有多个值的数组，传递到后台也可以匹配参数\n      // js利用|| 或者 && 简便赋值方式\n      const dictCode = row.dictCode || this.ids\n      // 确认框显示\n      this.$confirm('此操作将永久删除该字典数据, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 开启遮罩\n        this.loading = true\n        // 调用api执行删除操作\n        deleteDictDataByIds(dictCode).then(res => {\n          // 关闭遮罩\n          this.loading = false\n          // 操作成功提示\n          this.msgSuccess('删除成功')\n          // 重新查询数据列表\n          this.getDictDataList()\n        })\n      }).catch(() => {\n        // 关闭遮罩\n        this.loading = false\n        // 操作失败提示\n        this.msgInfo('取消删除操作')\n      })\n    },\n    // 重置表单\n    reset() {\n      // 设置初始值\n      this.form = {\n        dictCode: undefined, // 字典数据主键\n        dictLable: undefined, // 字典数据标签，中文值\n        dictValue: undefined, // 字典数据键值  数字\n        dictType: undefined, // 字典数据对应的类型\n        status: '0', // 默认状态 正常\n        dictSort: 0, // 默认排序号  0\n        remark: undefined // 备注\n      }\n      // 重置表单,对整个表单进行重置，将所有字段值重置为初始值并移除校验结果\n      this.resetForm('form')\n    },\n    // 改变数据列表第一列多选框选中状态所触发的方法,selection为选择的内容\n    handleSelectionChnage(selection) {\n      // selection保存着勾选的一条数据，以数组形式存储，对象为一个单位\n      this.single = selection.length === 1\n      this.multiple = selection.length > 1\n      // 保存勾选的数据的id  item表示取出数组中一个数据，然后获取到该条数据的id，遍历完成后，ids拿到所有勾选的id\n      this.ids = selection.map(item => item.dictCode)\n    },\n    // 改变每页显示条数的时候触发\n    handleSizeChange(val) {\n      // 更新每页显示条数\n      this.queryParams.pageSize = val\n      // 重新查询\n      this.getDictDataList()\n    },\n    // 当前页改变时触发(前一页,点击某一页,下一页,跳转某一页)\n    handleCurrentChange(val) {\n      // 更新需要显示的第几页数\n      this.queryParams.pageNum = val\n      // 重新查询\n      this.getDictDataList()\n    },\n    // 转换字典数据(code值与实际显示值)\n    statusFormatter(row) {\n      return this.transferDictCode(this.statusOptions, row.status)\n    },\n    // 模态框  保存按钮\n    /**\n     * 因为新增和修改操作都是打开同一个模态框\n     * 因此点击保存按钮时，需要区分执行的是新增操作还是修改操作\n     *    个人想法：根据this.form.dictId来区分\n     *              如果this.form.dictId不存在那么就是新增，因为dictId会在后台生成\n     *               否则为修改操作\n     */\n    handleSubmit() {\n      // 打开遮罩\n      this.loading = true\n      if (this.form.dictCode === undefined) {\n        // 添加操作\n        // 表单前端校验，如果不通过就不会执行后端方法\n        this.$refs['form'].validate((valid) => {\n          if (valid) { // 通过校验\n            // 调用保存字典类型的api，调用引入的api不可以使用this.xxx,因为不是当前页面的方法\n            addDictData(this.form).then(res => {\n              // 显示保存成功的消息,调用全局消息\n              this.msgSuccess('保存成功')\n              // 关闭遮罩\n              this.loading = false\n              // 列表数据重新查询\n              this.getDictDataList()\n              // 关闭模态框\n              this.open = false\n            }).catch(() => {\n              // 出现异常的处理方式\n              // 已经通过响应拦截器处理了该类型的异常，并显示了提示信息\n              // 关闭遮罩\n              this.loading = false\n            })\n          } else {\n            this.msgError('数据校验不通过')\n            this.loading = false\n          }\n        })\n      } else {\n        // 修改操作\n        // 表单前端校验，如果不通过就不会执行后端方法\n        this.$refs['form'].validate((valid) => {\n          if (valid) {\n            updateDictData(this.form).then(res => {\n              // 显示修改成功的消息,调用全局消息\n              this.msgSuccess('修改成功')\n              // 关闭遮罩\n              this.loading = false\n              // 列表数据重新查询\n              this.getDictDataList()\n              // 关闭模态框\n              this.open = false\n            }).catch(() => {\n              // 出现异常的处理方式\n              // 已经通过响应拦截器处理了该类型的异常，并显示了提示信息\n              // 关闭遮罩\n              this.loading = false\n            })\n          } else {\n            this.msgError('数据校验不通过')\n            this.loading = false\n          }\n        })\n      }\n    },\n    // 模态框  取消按钮\n    cancel() {\n      // 设置open为false,表示关闭模态框\n      this.open = false\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]}]}