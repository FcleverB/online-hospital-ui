{"remainingRequest":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\babel-loader\\lib\\index.js!G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\src\\views\\system\\dict\\data.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\src\\views\\system\\dict\\data.vue","mtime":1605154529082},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgbGlzdEZvclBhZ2UsIGFkZERpY3REYXRhLCB1cGRhdGVEaWN0RGF0YSwgZGVsZXRlRGljdERhdGFCeUlkcywgZ2V0RGljdERhdGFCeUlkIH0gZnJvbSAnQC9hcGkvc3lzdGVtL2RpY3QvZGF0YSc7CmltcG9ydCB7IGdldERpY3RUeXBlQnlJZCwgc2VsZWN0QWxsRGljdFR5cGUgfSBmcm9tICdAL2FwaS9zeXN0ZW0vZGljdC90eXBlJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdEYXRhJywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgLy8g6YGu572p5bGCCiAgICAgIGxvYWRpbmc6IGZhbHNlLAogICAgICAvLyDmlbDmja7liJfooajpppbliJfvvIzli77pgInnmoRpZOmbhuWQiAogICAgICBpZHM6IFtdLAogICAgICAvLyDpnZ7ljZXkuKrnpoHnlKgKICAgICAgc2luZ2xlOiB0cnVlLAogICAgICAvLyDpnZ7lpJrkuKrnpoHnlKgKICAgICAgbXVsdGlwbGU6IHRydWUsCiAgICAgIC8vIOaAu+adoeaVsAogICAgICB0b3RhbDogMCwKICAgICAgLy8g5a2X5YW45pWw5o2u6KGo5qC85pWw5o2uCiAgICAgIGRpY3REYXRhVGFibGVMaXN0OiBbXSwKICAgICAgLy8g5by55Ye65bGC5qCH6aKYCiAgICAgIHRpdGxlOiAnJywKICAgICAgLy8g5piv5ZCm5pi+56S65by55Ye65bGCCiAgICAgIG9wZW46IGZhbHNlLAogICAgICAvLyDnirbmgIHmlbDmja7lrZflhbgKICAgICAgc3RhdHVzT3B0aW9uczogW10sCiAgICAgIC8vIOaJgOacieWtl+WFuOexu+Wei+aVsOaNrgogICAgICBkaWN0VHlwZU9wdGlvbnM6IFtdLAogICAgICAvLyDpu5jorqTmn6Xor6LnmoTnsbvlnoss54K55Ye75p+Q5Liq5a2X5YW457G75Z6L6L+b5YWl5Yiw57G75Z6L6K+m5oOF6aG16Z2i5Lit77yM5Lya5Zyo5p+l6K+i5p2h5Lu25Lit6buY6K6k6YCJ5Lit6K+l5a2X5YW457G75Z6LCiAgICAgIC8vIOWvueafpeivouWPguaVsOS4reWvueW6lOWtl+WFuOexu+Wei+i/m+ihjOe7keWumuWNs+WPr++8jGNyZWF0ZWTmlrnms5XkuK0KICAgICAgLy8gZGVmYXVsdERpY3RUeXBlOiB1bmRlZmluZWQsCiAgICAgIC8vIOafpeivouWPguaVsAogICAgICBxdWVyeVBhcmFtczogewogICAgICAgIHBhZ2VOdW06IDEsCiAgICAgICAgcGFnZVNpemU6IDEwLAogICAgICAgIGRpY3RMYWJlbDogdW5kZWZpbmVkLAogICAgICAgIC8vIOWtl+WFuOaVsOaNruWAvO+8iOS4reaWh++8iQogICAgICAgIGRpY3RUeXBlOiB1bmRlZmluZWQsCiAgICAgICAgLy8g5omA5bGe55qE5a2X5YW457G75Z6LCiAgICAgICAgc3RhdHVzOiB1bmRlZmluZWQgLy8g54q25oCBCgogICAgICB9LAogICAgICAvLyDooajljZXmlbDmja7vvIjmlrDlop7lkozkv67mlLnmqKHmgIHmoYbvvIkKICAgICAgZm9ybToge30sCiAgICAgIC8vIOihqOWNleagoemqjAogICAgICBydWxlczogewogICAgICAgIGRpY3RMYWJlbDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+aVsOaNruagh+etvuS4jeiDveS4uuepuicsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICBkaWN0VmFsdWU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfmlbDmja7plK7lgLzkuI3og73kuLrnqbonLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0KICAgICAgfQogICAgfTsKICB9LAogIC8vIOeUn+WRveWRqOacnyzpkqnlrZDlh73mlbAgIOWcqOWunuS+i+WIm+W7uuWujOaIkOWQjuiiq+eri+WNs+iwg+eUqAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIC8vIOWKoOi9vemhtemdouaXtizpnIDopoHov5vooYzliJ3lp4vljJbmlbDmja4s6LCD55So5p+l6K+i5pWw5o2u5YiX6KGo55qE5pa55rOVCiAgICB0aGlzLmdldERpY3REYXRhTGlzdCgpOyAvLyDkvb/nlKjlhajlsYDnmoTmoLnmja7lrZflhbjnsbvlnovmn6Xor6LlrZflhbjmlbDmja7nmoTmlrnms5XmnaXojrflj5bmn6Xor6LmnaHku7bkuK3nmoTnirbmgIHkv6Hmga8KCiAgICB0aGlzLmdldERhdGFCeVR5cGUoJ3N5c19ub3JtYWxfZGlzYWJsZScpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAvLyDlsIbmn6Xor6LliLDnmoTnirbmgIHkv6Hmga/kv53lrZjliLDlvZPliY3pobXpnaLlr7nlupTnmoTlsZ7mgKfkuK0KICAgICAgX3RoaXMuc3RhdHVzT3B0aW9ucyA9IHJlcy5kYXRhOwogICAgfSk7IC8vIOi/m+WFpeivpemhtemdouaXtu+8jOS8muWcqOi3r+eUseS4reaQuuW4puaJgOeCueWHu+eahOWtl+WFuOexu+Wei2lk77yM5Y+v5Lul5qC55o2u5q2k5p2l6L+b6KGM5pi+56S66buY6K6k5YaF5a6577yM5bm25LiU5Zyo5p+l6K+i5p2h5Lu25Lit5a2X5YW457G75Z6L5LiL5ouJ5qGG6buY6K6k6YCJ5Lit5a+55bqU57G75Z6LCiAgICAvLyBqc+WIqeeUqHx8IOaIluiAhSAmJiDnroDkvr/otYvlgLzmlrnlvI8KCiAgICB2YXIgZGljdElkID0gdGhpcy4kcm91dGUucGFyYW1zICYmIHRoaXMuJHJvdXRlLnBhcmFtcy5kaWN0SWQ7IC8vIOi3r+eUseS8oOWPggogICAgLy8g5qC55o2u5a2X5YW457G75Z6LaWTojrflj5blr7nlupTnmoTlrZflhbjnsbvlnoss5Li65LqG5Zyo5p+l6K+i5p2h5Lu25Lit55qE5a2X5YW457G75Z6L5Lit6L+b6KGM6buY6K6k6YCJ5LitCgogICAgZ2V0RGljdFR5cGVCeUlkKGRpY3RJZCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgIC8vIOS/neWtmOafpeivouWIsOeahOeKtuaAgeS/oeaBrwogICAgICAvLyB0aGlzLmRlZmF1bHREaWN0VHlwZSA9IHJlcy5kYXRhLmRpY3RUeXBlCiAgICAgIC8vIOS4i+aLieahhuS4rem7mOiupOmAieS4rQogICAgICBfdGhpcy5xdWVyeVBhcmFtcy5kaWN0VHlwZSA9IHJlcy5kYXRhLmRpY3RUeXBlOwogICAgfSk7IC8vIOafpeivouaJgOacieeahOWtl+WFuOexu+Wei++8jOWhq+WFheWcqOafpeivouadoeS7tuS4reeahOWtl+WFuOexu+Wei+S4i+aLieahhuWGhQoKICAgIHNlbGVjdEFsbERpY3RUeXBlKCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgIC8vIOS/neWtmOaJgOacieWtl+WFuOexu+Wei+aVsOaNrgogICAgICBfdGhpcy5kaWN0VHlwZU9wdGlvbnMgPSByZXMuZGF0YTsKICAgIH0pOwogIH0sCiAgbWV0aG9kczogewogICAgLy8g5p+l6K+i5pWw5o2u5YiX6KGo5pWw5o2uCiAgICBnZXREaWN0RGF0YUxpc3Q6IGZ1bmN0aW9uIGdldERpY3REYXRhTGlzdCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICAvLyDmiZPlvIDpga7nvakKICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTsgLy8g6LCD55So5YiG6aG15p+l6K+i55qEYXBp5pa55rOVCgogICAgICBsaXN0Rm9yUGFnZSh0aGlzLnF1ZXJ5UGFyYW1zKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAvLyDlsIbliIbpobXmlbDmja7kvKDpgJLnu5nmlbDmja7nsbvooajnu5HlrprnmoRkYXRh5pWw5o2uCiAgICAgICAgX3RoaXMyLmRpY3REYXRhVGFibGVMaXN0ID0gcmVzLmRhdGE7IC8vIOafpeivouWIsOaVsOaNruS6hizlsLHopoHmmL7npLrliIbpobXkuoYKCiAgICAgICAgX3RoaXMyLnRvdGFsID0gcmVzLnRvdGFsOyAvLyDlhbPpl63pga7nvakKCiAgICAgICAgX3RoaXMyLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g5p+l6K+i5pON5L2cCiAgICBoYW5kbGVRdWVyeTogZnVuY3Rpb24gaGFuZGxlUXVlcnkoKSB7CiAgICAgIC8vIOaJp+ihjOWunumZheeahOafpeivouaWueazlQogICAgICAvLyDlm6DkuLrovpPlhaXnmoTmn6Xor6LmnaHku7blrp7ml7bkuI5xdWVyeVBhcmFtc+WKqOaAgee7keWumgogICAgICB0aGlzLmdldERpY3REYXRhTGlzdCgpOwogICAgfSwKICAgIC8vIOa4heepuuafpeivouadoeS7tuaTjeS9nAogICAgcmVzZXRRdWVyeTogZnVuY3Rpb24gcmVzZXRRdWVyeSgpIHsKICAgICAgLy8g5riF56m65p+l6K+i5pWw5o2uCiAgICAgIHRoaXMucmVzZXRGb3JtKCdxdWVyeUZvcm0nKTsgLy8g6YeN5paw5p+l6K+i5pWw5o2u5YiX6KGoLOebuOW9k+S6juaJp+ihjOS4gOasoeaXoOafpeivouadoeS7tueahOafpeivouaTjeS9nCzlpoLmnpzkuI3osIPnlKjov5nkuKrmlrnms5Us6YKj5LmI5riF56m65pON5L2c5ZCOLOaVsOaNruWIl+ihqOS4jeS8muWQjOatpeaUueWPmAoKICAgICAgdGhpcy5nZXREaWN0RGF0YUxpc3QoKTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["data.vue"],"names":[],"mappings":"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","sourcesContent":["<!--字典数据页面-->\n<template>\n  <div class=\"app-container\">\n    <!--查询条件开始-->\n    <!--\n      ref:\n      model:绑定查询条件部分的数据绑定,与queryParams有关,点击查询按钮时,将查询参数传递到后台\n      inline:变为行内域\n      label-width:设置每个标签的宽度,指定在el-form上时,其直接子标签form-item会继承该值\n    -->\n    <el-form ref=\"queryForm\" :model=\"queryParams\" :inline=\"true\" label-width=\"68px\">\n      <el-form-item label=\"字典类型\" prop=\"dictType\">\n        <!--input输入框\n          v-model:指定与queryParams中哪个属性进行动态绑定\n          placeholder:输入框内默认填充的数据,获得焦点后消失\n          clearable:是否可以一键清除\n          size:输入框大小,影响内容大小\n        -->\n        <!--select下拉框-->\n        <el-select\n          v-model=\"queryParams.dictType\"\n          placeholder=\"请选择字典类型\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        >\n          <!--下拉框内容,遍历dictTypeOptions属性,这里面保存了查询到的所有的字典类型数据\n            key:唯一标注\n            label:标签\n            value:实际存储的值\n          -->\n          <el-option\n            v-for=\"dict in dictTypeOptions\"\n            :key=\"dict.dictType\"\n            :label=\"dict.dictName\"\n            :value=\"dict.dictType\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"字典标签\" prop=\"dictLabel\">\n        <el-input\n          v-model=\"queryParams.dictLabel\"\n          placeholder=\"请输入字典标签\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        />\n      </el-form-item>\n      <el-form-item label=\"状态\" prop=\"status\">\n        <!--select下拉框-->\n        <el-select\n          v-model=\"queryParams.status\"\n          placeholder=\"字典状态\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        >\n          <!--下拉框内容,遍历statusOptions属性,这里面保存了查询的状态的码表\n            key:唯一标注\n            label:标签\n            value:实际存储的值\n          -->\n          <el-option\n            v-for=\"dict in statusOptions\"\n            :key=\"dict.dictValue\"\n            :label=\"dict.dictLabel\"\n            :value=\"dict.dictValue\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item>\n        <!--查询和清空按钮-->\n        <el-button type=\"primary\" icon=\"el-icon-search\" size=\"mini\" @click=\"handleQuery\">查询</el-button>\n        <el-button type=\"primary\" icon=\"el-icon-refresh\" size=\"mini\" @click=\"resetQuery\">清空</el-button>\n      </el-form-item>\n    </el-form>\n    <!--查询条件结束-->\n    <!--操作栏按钮开始-->\n    <!--操作栏按钮结束-->\n    <!--数据列表开始-->\n    <!--数据列表结束-->\n    <!--分页控件开始-->\n    <!--分页控件结束-->\n    <!--新增和修改模态框开始-->\n    <!--新增和修改模态框结束-->\n  </div>\n</template>\n\n<script>\nimport { listForPage, addDictData, updateDictData, deleteDictDataByIds, getDictDataById } from '@/api/system/dict/data'\nimport { getDictTypeById, selectAllDictType } from '@/api/system/dict/type'\nexport default {\n  name: 'Data',\n  data() {\n    return {\n      // 遮罩层\n      loading: false,\n      // 数据列表首列，勾选的id集合\n      ids: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 总条数\n      total: 0,\n      // 字典数据表格数据\n      dictDataTableList: [],\n      // 弹出层标题\n      title: '',\n      // 是否显示弹出层\n      open: false,\n      // 状态数据字典\n      statusOptions: [],\n      // 所有字典类型数据\n      dictTypeOptions: [],\n      // 默认查询的类型,点击某个字典类型进入到类型详情页面中，会在查询条件中默认选中该字典类型\n      // 对查询参数中对应字典类型进行绑定即可，created方法中\n      // defaultDictType: undefined,\n      // 查询参数\n      queryParams: {\n        pageNum: 1,\n        pageSize: 10,\n        dictLabel: undefined, // 字典数据值（中文）\n        dictType: undefined, // 所属的字典类型\n        status: undefined // 状态\n      },\n      // 表单数据（新增和修改模态框）\n      form: {},\n      // 表单校验\n      rules: {\n        dictLabel: [\n          { required: true, message: '数据标签不能为空', trigger: 'blur' }\n        ],\n        dictValue: [\n          { required: true, message: '数据键值不能为空', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  // 生命周期,钩子函数  在实例创建完成后被立即调用\n  created() {\n    // 加载页面时,需要进行初始化数据,调用查询数据列表的方法\n    this.getDictDataList()\n    // 使用全局的根据字典类型查询字典数据的方法来获取查询条件中的状态信息\n    this.getDataByType('sys_normal_disable').then(res => {\n      // 将查询到的状态信息保存到当前页面对应的属性中\n      this.statusOptions = res.data\n    })\n    // 进入该页面时，会在路由中携带所点击的字典类型id，可以根据此来进行显示默认内容，并且在查询条件中字典类型下拉框默认选中对应类型\n    // js利用|| 或者 && 简便赋值方式\n    const dictId = this.$route.params && this.$route.params.dictId // 路由传参\n    // 根据字典类型id获取对应的字典类型,为了在查询条件中的字典类型中进行默认选中\n    getDictTypeById(dictId).then(res => {\n      // 保存查询到的状态信息\n      // this.defaultDictType = res.data.dictType\n      // 下拉框中默认选中\n      this.queryParams.dictType = res.data.dictType\n    })\n    // 查询所有的字典类型，填充在查询条件中的字典类型下拉框内\n    selectAllDictType().then(res => {\n      // 保存所有字典类型数据\n      this.dictTypeOptions = res.data\n    })\n  },\n  methods: {\n    // 查询数据列表数据\n    getDictDataList() {\n      // 打开遮罩\n      this.loading = true\n      // 调用分页查询的api方法\n      listForPage(this.queryParams).then(res => {\n        // 将分页数据传递给数据类表绑定的data数据\n        this.dictDataTableList = res.data\n        // 查询到数据了,就要显示分页了\n        this.total = res.total\n        // 关闭遮罩\n        this.loading = false\n      })\n    },\n    // 查询操作\n    handleQuery() {\n      // 执行实际的查询方法\n      // 因为输入的查询条件实时与queryParams动态绑定\n      this.getDictDataList()\n    },\n    // 清空查询条件操作\n    resetQuery() {\n      // 清空查询数据\n      this.resetForm('queryForm')\n      // 重新查询数据列表,相当于执行一次无查询条件的查询操作,如果不调用这个方法,那么清空操作后,数据列表不会同步改变\n      this.getDictDataList()\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"],"sourceRoot":"src/views/system/dict"}]}