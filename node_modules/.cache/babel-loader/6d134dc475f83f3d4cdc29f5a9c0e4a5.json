{"remainingRequest":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\babel-loader\\lib\\index.js!G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\src\\views\\system\\menu\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\src\\views\\system\\menu\\index.vue","mtime":1606403014894},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<!--字典类型页面-->\n<template>\n  <div class=\"app-container\">\n    <!--查询条件开始-->\n    <!--\n      ref:\n      model:绑定查询条件部分的数据绑定,与queryParams有关,点击查询按钮时,将查询参数传递到后台\n      inline:变为行内域\n      label-width:设置每个标签的宽度,指定在el-form上时,其直接子标签form-item会继承该值\n    -->\n    <el-form ref=\"queryForm\" :model=\"queryParams\" :inline=\"true\" label-width=\"68px\">\n      <el-form-item label=\"菜单名称\" prop=\"menuName\">\n        <!--input输入框\n          v-model:指定与queryParams中哪个属性进行动态绑定\n          placeholder:输入框内默认填充的数据,获得焦点后消失\n          clearable:是否可以一键清除\n          size:输入框大小,影响内容大小\n        -->\n        <el-input\n          v-model=\"queryParams.menuName\"\n          placeholder=\"请输入菜单名称\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        />\n      </el-form-item>\n      <el-form-item label=\"状态\" prop=\"status\">\n        <!--select下拉框-->\n        <el-select\n          v-model=\"queryParams.status\"\n          placeholder=\"请选择菜单状态\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        >\n          <!--下拉框内容,遍历statusOptions属性,这里面保存了查询的状态的码表\n            key:唯一标注\n            label:标签\n            value:实际存储的值\n          -->\n          <el-option\n            v-for=\"dict in statusOptions\"\n            :key=\"dict.dictValue\"\n            :label=\"dict.dictLabel\"\n            :value=\"dict.dictValue\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item>\n        <!--查询和清空按钮-->\n        <el-button type=\"primary\" icon=\"el-icon-search\" size=\"mini\" @click=\"handleQuery\">查询</el-button>\n        <el-button type=\"primary\" icon=\"el-icon-refresh\" size=\"mini\" @click=\"resetQuery\">清空</el-button>\n      </el-form-item>\n    </el-form>\n    <!--查询条件结束-->\n    <!--操作栏按钮开始-->\n    <!--el-row:表示一行数据\n      gutter:每一栏之间的间隔\n    -->\n    <el-row :gutter=\"10\" style=\"margin-bottom: 8px;\">\n      <!--el-col:表示一列\n        span:指定该列所占的宽度,最大指定为24\n      -->\n      <el-col :span=\"1.5\">\n        <!--新增按钮:尺寸mini-->\n        <el-button type=\"primary\" icon=\"el-icon-plus\" size=\"mini\" @click=\"handleAdd\">新增</el-button>\n      </el-col>\n    </el-row>\n    <!--操作栏按钮结束-->\n    <!--数据列表开始-->\n    <!--el-table:数据列表\n      v-loading:v-loading在接口未请求到数据之前，显示加载中，直到请求到数据后消失\n      border:表示有边框\n      data:数据列表中显示的数据从哪获取\n      @selection-change:当选择项发生变化时会触发该事件\n    -->\n    <el-table\n      v-loading=\"loading\"\n      border\n      :data=\"menuTableList\"\n      row-key=\"menuId\"\n      :tree-props=\"{children: 'children', hasChildren: 'hasChildren'}\">\n      <!--el-table-column:每一行中的每一列\n        prop:对应从:data中取出的数据\n        align:对齐方式\n        label:列\n        lazy:懒加载\n        show-overflow-tooltip:默认情况下数据过长不够显示的时候是换行显示,如果需要单行显示,可以使用这个,并且当鼠标移动到此处时会显示实际内容的提示信息\n      -->\n      <el-table-column label=\"菜单名称\" prop=\"menuName\" align=\"left\" header-align=\"center\"></el-table-column>\n      <el-table-column label=\"菜单类型\" prop=\"menuType\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-tag :type=\"scope.row.menuType === 'M' ? '' : scope.row.menuType === 'C' ? 'success' : 'info'\">\n            {{scope.row.menuType === 'M' ? '目录' : scope.row.menuType === 'C' ? '菜单' : '权限'}}\n          </el-tag>\n<!--          <el-tag v-if=\"scope.row.menuType === 'M'\">目录</el-tag>-->\n<!--          <el-tag type=\"success\" v-else-if=\"scope.row.menuType === 'C'\">菜单</el-tag>-->\n<!--          <el-tag type=\"info\" v-else>权限</el-tag>-->\n        </template>\n      </el-table-column>\n      <el-table-column label=\"路由路径\" prop=\"path\" align=\"center\" ></el-table-column>\n      <el-table-column label=\"权限标识\" prop=\"percode\" align=\"center\" ></el-table-column>\n      <!--formatter:用于按照指定要求来格式化此处需要显示的值,显示在列表中的数据是经过statusFormatter处理后的内容-->\n      <el-table-column label=\"状态\" prop=\"status\" align=\"center\" :formatter=\"statusFormatter\" />\n      <el-table-column label=\"创建时间\" prop=\"createTime\" align=\"center\" width=\"180\" />\n      <el-table-column label=\"操作\" align=\"center\">\n        <!--slot-scope=\"scope\" 取到当前单元格-->\n        <template slot-scope=\"scope\">\n          <!--传递该条数据到具体处理方法中-->\n          <el-button type=\"text\" icon=\"el-icon-plus\" size=\"mini\" @click=\"handleAdd(scope.row)\">新增</el-button>\n          <el-button type=\"text\" icon=\"el-icon-edit\" size=\"mini\" @click=\"handleUpdate(scope.row)\">修改</el-button>\n          <el-button type=\"text\" icon=\"el-icon-delete\" size=\"mini\" @click=\"handleDelete(scope.row)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <!--数据列表结束-->\n    <!--新增和修改模态框开始-->\n    <!--dialog:对话框\n      title:模态框标题\n      visible.sync:表示是否显示\n      center:居中\n      append-to-body:如果需要在一个对话框内部嵌套另一个对话框，需要使用append-to-body属性\n    -->\n    <el-dialog\n      :title=\"title\"\n      :visible.sync=\"open\"\n      width=\"500px\"\n      center\n      append-to-body\n    >\n      <!--添加和修改的表单\n        rules:做表单数据前端校验\n        label-width:标签宽度(文字)\n      -->\n      <el-form ref=\"form\" :model=\"form\" :rules=\"rules\" label-width=\"80px\">\n        <el-form-item label=\"字典名称\" prop=\"dictName\">\n          <el-input v-model=\"form.dictName\" placeholder=\"请输入字典名称\" clearable size=\"small\" />\n        </el-form-item>\n        <el-form-item label=\"字典类型\" prop=\"dictType\">\n          <el-input v-model=\"form.dictType\" placeholder=\"请输入字典类型\" clearable size=\"small\" />\n        </el-form-item>\n        <el-form-item label=\"状态\" prop=\"status\">\n          <!--单选框-->\n          <el-radio-group v-model=\"form.status\">\n            <el-radio\n              v-for=\"dict in statusOptions\"\n              :key=\"dict.dictValue\"\n              :label=\"dict.dictValue\"\n              :value=\"dict.dictValue\"\n            >{{ dict.dictLabel }}</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"备注\" prop=\"remark\">\n          <el-input v-model=\"form.remark\" type=\"textarea\" placeholder=\"请输入字典备注\" clearable size=\"small\" />\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"handleSubmit\">保 存</el-button>\n        <el-button @click=\"cancel\">取 消</el-button>\n      </span>\n    </el-dialog>\n    <!--新增和修改模态框结束-->\n  </div>\n</template>\n\n<script>\n// 引入菜单管理相关api\nimport { updateMenu, listAllMenus, selectMenuTree, deleteMenuById, getMenuById, addMenu } from '@/api/system/menu/menu'\nimport {handleTree} from \"@/utils/hospital-uitls\";\nexport default {\n  name: 'Menu',\n  data() {\n    return {\n      // 是否启用遮罩层,请求后台时出现进度条(如果请求响应很快的话,可能看不到)\n      // 体现在页面上就是一个页面中心一个转圈的显示\n      loading: false,\n      // 数据列表中数据\n      menuTableList: [],\n      // 模态框的标题\n      title: '',\n      // 是否显示模态框\n      open: false,\n      // 查询条件中状态的码表(正常,停用)\n      statusOptions: [],\n      // 查询参数\n      queryParams: {\n        menuName: undefined, // 菜单名称\n        status: undefined // 状态\n      },\n      // 表单数据(添加和修改的模态框中的数据)\n      form: {},\n      // 表单校验(前端校验,失去焦点就会触发)\n      // 给对应属性添加必填校验之后,会在label处显示*号\n      rules: {\n        // 字典名称\n        menuName: [\n          { required: true, message: '菜单名称不能为空', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  // 生命周期,钩子函数  在实例创建完成后被立即调用\n  created() {\n    // 加载页面时,需要进行初始化数据,调用查询数据列表的方法\n    this.getMenuList()\n    // 使用全局的根据字典类型查询字典数据的方法来获取查询条件中的状态信息\n    this.getDataByType('sys_normal_disable').then(res => {\n      // 将查询到的状态信息保存到当前页面对应的属性中\n      this.statusOptions = res.data\n    })\n  },\n  methods: {\n    // 查询数据列表数据\n    getMenuList() {\n      // 打开遮罩\n      this.loading = true\n      // listForPage(this.queryParams).then(res => {\n      // 通过addDateRange封装起始时间和结束时间\n      listAllMenus(this.queryParams).then(res => {\n        // 构造菜单数据为树形结构\n        this.menuTableList = this.handleTree(res.data, 'menuId')\n        // 将构造后的数据传递给数据类表绑定的data数据\n        // this.menuTableList = res.data\n        // 关闭遮罩\n        this.loading = false\n      })\n    },\n    // 查询操作\n    handleQuery() {\n      // 执行实际的查询方法\n      // 因为输入的查询条件实时与queryParams动态绑定\n      this.getMenuList()\n    },\n    // 清空查询条件操作\n    resetQuery() {\n      // 清空查询数据\n      this.resetForm('queryForm')\n      // 重新查询数据列表,相当于执行一次无查询条件的查询操作,如果不调用这个方法,那么清空操作后,数据列表不会同步改变\n      this.getMenuList()\n    },\n    // 添加操作,打开添加模态框\n    handleAdd(row) {\n      // 打开模态框\n      this.open = true\n      // 重置表单\n      this.reset()\n    },\n    // 修改操作,打开修改模态框\n    handleUpdate(row) {\n      // 这里只有对单独行进行修改\n      const menuId = row.menuId\n      // 打开模态框\n      this.open = true\n      // 重置表单\n      this.reset()\n      // 根据id查询对应字典类型，并填充到form中\n      // 这里通过id查询到的数据是一整条数据，填充到了form中，并不影响\n      // getDictTypeById(row.dictId).then(res => {\n      getMenuById(menuId).then(res => {\n        this.form = res.data\n      })\n      // 优化点，row已经是一整条数据了，为啥还要走后台查询呢？\n      // this.form = row\n    },\n    // 删除操作(含批量)\n    handleDelete(row) {\n      // 仅针对一行进行操作\n      const menuId = row.menuId\n      // 确认框显示\n      this.$confirm('此操作将永久删除该菜单信息, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 开启遮罩\n        this.loading = true\n        // 调用api执行删除操作\n        deleteMenuById(menuId).then(res => {\n          // 关闭遮罩\n          this.loading = false\n          // 操作成功提示\n          this.msgSuccess('删除成功')\n          // 重新查询数据列表\n          this.getMenuList()\n        })\n      }).catch(() => {\n        // 关闭遮罩\n        this.loading = false\n        // 操作失败提示\n        this.msgInfo('取消删除操作')\n      })\n    },\n    // 转换字典数据(code值与实际显示值)\n    statusFormatter(row) {\n      return this.transferDictCode(this.statusOptions, row.status)\n    },\n    // 模态框  保存按钮\n    /**\n     * 因为新增和修改操作都是打开同一个模态框\n     * 因此点击保存按钮时，需要区分执行的是新增操作还是修改操作\n     *    个人想法：根据this.form.menuId\n     *              如果this.form.menuId不存在那么就是新增，因为menuId会在后台生成\n     *               否则为修改操作\n     */\n    handleSubmit() {\n      // 打开遮罩\n      this.loading = true\n      if (this.form.menuId === undefined) {\n        // 添加操作\n        // 表单前端校验，如果不通过就不会执行后端方法\n        this.$refs['form'].validate((valid) => {\n          if (valid) { // 通过校验\n            // 调用保存字典类型的api，调用引入的api不可以使用this.xxx,因为不是当前页面的方法\n            addMenu(this.form).then(res => {\n              // 显示保存成功的消息,调用全局消息\n              this.msgSuccess('保存成功')\n              // 关闭遮罩\n              this.loading = false\n              // 列表数据重新查询\n              this.getMenuList()\n              // 关闭模态框\n              this.open = false\n            }).catch(() => {\n              // 出现异常的处理方式\n              // 已经通过响应拦截器处理了该类型的异常，并显示了提示信息\n              // 关闭遮罩\n              this.loading = false\n            })\n          } else {\n            this.msgError('数据校验不通过')\n            this.loading = false\n          }\n        })\n      } else {\n        // 修改操作\n        // 表单前端校验，如果不通过就不会执行后端方法\n        this.$refs['form'].validate((valid) => {\n          if (valid) {\n            updateMenu(this.form).then(res => {\n              // 显示修改成功的消息,调用全局消息\n              this.msgSuccess('修改成功')\n              // 关闭遮罩\n              this.loading = false\n              // 列表数据重新查询\n              this.getMenuList()\n              // 关闭模态框\n              this.open = false\n            }).catch(() => {\n              // 出现异常的处理方式\n              // 已经通过响应拦截器处理了该类型的异常，并显示了提示信息\n              // 关闭遮罩\n              this.loading = false\n            })\n          } else {\n            this.msgError('数据校验不通过')\n            this.loading = false\n          }\n        })\n      }\n    },\n    // 模态框  取消按钮\n    cancel() {\n      // 设置open为false,表示关闭模态框\n      this.open = false\n    },\n    // 重置表单\n    reset() {\n      // 设置初始值\n      this.form = {\n        menuId: undefined, // 菜单id\n        parentId: 0, // 父菜单id\n        menuName: undefined, // 菜单名称\n        percode: undefined, // 权限标识\n        menuType: 'M', // 菜单类型\n        remark: undefined, // 备注\n        status: '0' // 默认选中正常状态\n      }\n      // 重置表单,对整个表单进行重置，将所有字段值重置为初始值并移除校验结果\n      this.resetForm('form')\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"],"sourceRoot":"src/views/system/menu"}]}