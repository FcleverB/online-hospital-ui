{"remainingRequest":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\babel-loader\\lib\\index.js!G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\src\\views\\system\\dict\\type.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\src\\views\\system\\dict\\type.vue","mtime":1604831836519},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\IdeaProjects\\LastTerminal\\Front\\online-hospital-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8g5byV5YWl5a2X5YW457G75Z6L55u45YWzYXBpCmltcG9ydCB7IGxpc3RGb3JQYWdlLCBhZGREaWN0VHlwZSwgdXBkYXRlRGljdFR5cGUsIGdldERpY3RUeXBlQnlJZCwgZGVsZXRlRGljdFR5cGVCeUlkcywgZGljdENhY2hlQXN5bmMgfSBmcm9tICdAL2FwaS9zeXN0ZW0vZGljdC90eXBlJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdUeXBlJywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgLy8g5piv5ZCm5ZCv55So6YGu572p5bGCLOivt+axguWQjuWPsOaXtuWHuueOsOi/m+W6puadoSjlpoLmnpzor7fmsYLlk43lupTlvojlv6vnmoTor50s5Y+v6IO955yL5LiN5YiwKQogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgLy8g6YCJ5Lit55qE5a2X5YW457G75Z6L55qEaWTpm4blkIgKICAgICAgaWRzOiBbXSwKICAgICAgLy8g5Yik5pat5piv5ZCm6YCJ5Lit5LqG5Y2V5p2h6K6w5b2VLOi/m+iAjOaOp+WItuS4gOS6m+mhtemdouihjOS4uizmr5TlpoLpgInkuK3kuobljZXkuKrlj6/ku6Xov5vooYzkv67mlLnmk43kvZwKICAgICAgc2luZ2xlOiB0cnVlLAogICAgICAvLyDliKTmlq3mmK/lkKbpgInkuK3kuoblpJrmnaHorrDlvZUs6L+b6KGM5o6n5Yi25LiA5Lqb6aG16Z2i6KGM5Li6LOavlOWmgumAieS4reS6huWkmuS4quWPr+S7pei/m+ihjOaJuemHj+WIoOmZpOaTjeS9nAogICAgICBtdWx0aXBsZTogdHJ1ZSwKICAgICAgLy8g5YiG6aG15pWw5o2u5oC75p2h5pWwCiAgICAgIHRvdGFsOiAwLAogICAgICAvLyDmlbDmja7liJfooajkuK3mlbDmja4o5a2X5YW457G75Z6LKQogICAgICBkaWN0VHlwZVRhYmxlTGlzdDogW10sCiAgICAgIC8vIOaooeaAgeahhueahOagh+mimAogICAgICB0aXRsZTogJycsCiAgICAgIC8vIOaYr+WQpuaYvuekuuaooeaAgeahhgogICAgICBvcGVuOiBmYWxzZSwKICAgICAgLy8g5p+l6K+i5p2h5Lu25Lit54q25oCB55qE56CB6KGoKOato+W4uCzlgZznlKgpCiAgICAgIHN0YXR1c09wdGlvbnM6IFtdLAogICAgICAvLyDmn6Xor6LmnaHku7bkuK3pgInmi6nnmoTml6XmnJ/ojIPlm7TmlbDmja4KICAgICAgZGF0ZVJhbmdlOiBbXSwKICAgICAgLy8g5p+l6K+i5Y+C5pWwCiAgICAgIHF1ZXJ5UGFyYW1zOiB7CiAgICAgICAgcGFnZU51bTogMSwKICAgICAgICAvLyDpu5jorqTnrKzkuIDpobUKICAgICAgICBwYWdlU2l6ZTogMTAsCiAgICAgICAgLy8g5q+P6aG16buY6K6kMTDmnaEKICAgICAgICBkaWN0TmFtZTogdW5kZWZpbmVkLAogICAgICAgIC8vIOS4jeetm+mAieWtl+WFuOWQjeensAogICAgICAgIGRpY3RUeXBlOiB1bmRlZmluZWQsCiAgICAgICAgLy8g5LiN562b6YCJ5a2X5YW457G75Z6LCiAgICAgICAgc3RhdHVzOiB1bmRlZmluZWQgLy8g5a2X5YW457G75Z6L55qE54q25oCBCgogICAgICB9LAogICAgICAvLyDooajljZXmlbDmja4o5re75Yqg5ZKM5L+u5pS555qE5qih5oCB5qGG5Lit55qE5pWw5o2uKQogICAgICBmb3JtOiB7fSwKICAgICAgLy8g6KGo5Y2V5qCh6aqMKOWJjeerr+agoemqjCzlpLHljrvnhKbngrnlsLHkvJrop6blj5EpCiAgICAgIHJ1bGVzOiB7CiAgICAgICAgLy8g5a2X5YW45ZCN56ewCiAgICAgICAgZGljdE5hbWU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICflrZflhbjlkI3np7DkuI3og73kuLrnqbonLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgLy8g5a2X5YW457G75Z6LCiAgICAgICAgZGljdFR5cGU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICflrZflhbjnsbvlnovkuI3og73kuLrnqbonLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0KICAgICAgfQogICAgfTsKICB9LAogIC8vIOeUn+WRveWRqOacnyzpkqnlrZDlh73mlbAgIOWcqOWunuS+i+WIm+W7uuWujOaIkOWQjuiiq+eri+WNs+iwg+eUqAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7fSwKICBtZXRob2RzOiB7CiAgICAvLyDmn6Xor6Lmk43kvZwKICAgIGhhbmRsZVF1ZXJ5OiBmdW5jdGlvbiBoYW5kbGVRdWVyeSgpIHsKICAgICAgY29uc29sZS5sb2codGhpcy5xdWVyeVBhcmFtcyk7IC8vIOaJp+ihjOWunumZheeahOafpeivouaWueazlQogICAgICAvLyB0aGlzLmdldERpY3RUeXBlTGlzdCgpCiAgICB9LAogICAgLy8g5riF56m65p+l6K+i5p2h5Lu25pON5L2cCiAgICByZXNldFF1ZXJ5OiBmdW5jdGlvbiByZXNldFF1ZXJ5KCkgewogICAgICBjb25zb2xlLmxvZyh0aGlzLnF1ZXJ5UGFyYW1zKTsgLy8g5riF56m65p+l6K+i5pWw5o2uCiAgICAgIC8vIHRoaXMucmVzZXRGb3JtKCdxdWVyeUZvcm0nKQogICAgICAvLyDmuIXnqbrmn6Xor6LmnaHku7bkuK3pgInmi6nnmoTml6XmnJ/mlbDmja4KICAgICAgLy8gdGhpcy5kYXRlUmFuZ2UgPSBbXQogICAgICAvLyDph43mlrDmn6Xor6LmlbDmja7liJfooags55u45b2T5LqO5omn6KGM5LiA5qyh5peg5p+l6K+i5p2h5Lu255qE5p+l6K+i5pON5L2cLOWmguaenOS4jeiwg+eUqOi/meS4quaWueazlSzpgqPkuYjmuIXnqbrmk43kvZzlkI4s5pWw5o2u5YiX6KGo5LiN5Lya5ZCM5q2l5pS55Y+YCiAgICAgIC8vIHRoaXMuZ2V0RGljdFR5cGVMaXN0KCkKICAgIH0sCiAgICAvLyDmt7vliqDmk43kvZws5omT5byA5re75Yqg5qih5oCB5qGGCiAgICBoYW5kbGVBZGQ6IGZ1bmN0aW9uIGhhbmRsZUFkZCgpIHsKICAgICAgLy8g5omT5byA5qih5oCB5qGGCiAgICAgIHRoaXMub3BlbiA9IHRydWU7CiAgICB9LAogICAgLy8g5L+u5pS55pON5L2cLOaJk+W8gOS/ruaUueaooeaAgeahhgogICAgaGFuZGxlVXBkYXRlOiBmdW5jdGlvbiBoYW5kbGVVcGRhdGUocm93KSB7fSwKICAgIC8vIOWIoOmZpOaTjeS9nCjlkKvmibnph48pCiAgICBoYW5kbGVEZWxldGU6IGZ1bmN0aW9uIGhhbmRsZURlbGV0ZShyb3cpIHt9LAogICAgLy8g57yT5a2Y5ZCM5q2lCiAgICBoYW5kbGVDYWNoZUFzeW5jOiBmdW5jdGlvbiBoYW5kbGVDYWNoZUFzeW5jKCkge30sCiAgICAvLyDmlLnlj5jmlbDmja7liJfooajnrKzkuIDliJflpJrpgInmoYbpgInkuK3nirbmgIHmiYDop6blj5HnmoTmlrnms5Usc2VsZWN0aW9u5Li66YCJ5oup55qE5YaF5a65CiAgICBoYW5kbGVTZWxlY3Rpb25DaG5hZ2U6IGZ1bmN0aW9uIGhhbmRsZVNlbGVjdGlvbkNobmFnZShzZWxlY3Rpb24pIHt9LAogICAgLy8g6L2s5o2i5a2X5YW45pWw5o2uKGNvZGXlgLzkuI7lrp7pmYXmmL7npLrlgLwpCiAgICBzdGF0dXNGb3JtYXR0ZXI6IGZ1bmN0aW9uIHN0YXR1c0Zvcm1hdHRlcihyb3cpIHsKICAgICAgcmV0dXJuIHJvdy5zdGF0dXM7CiAgICB9LAogICAgLy8g5pS55Y+Y5q+P6aG15pi+56S65p2h5pWw55qE5pe25YCZ6Kem5Y+RCiAgICBoYW5kbGVTaXplQ2hhbmdlOiBmdW5jdGlvbiBoYW5kbGVTaXplQ2hhbmdlKHZhbCkge30sCiAgICAvLyDlvZPliY3pobXmlLnlj5jml7bop6blj5Eo5YmN5LiA6aG1LOeCueWHu+afkOS4gOmhtSzkuIvkuIDpobUs6Lez6L2s5p+Q5LiA6aG1KQogICAgaGFuZGxlQ3VycmVudENoYW5nZTogZnVuY3Rpb24gaGFuZGxlQ3VycmVudENoYW5nZSh2YWwpIHt9LAogICAgLy8g5qih5oCB5qGGICDkv53lrZjmjInpkq4KICAgIGhhbmRsZVN1Ym1pdDogZnVuY3Rpb24gaGFuZGxlU3VibWl0KCkge30sCiAgICAvLyDmqKHmgIHmoYYgIOWPlua2iOaMiemSrgogICAgY2FuY2VsOiBmdW5jdGlvbiBjYW5jZWwoKSB7CiAgICAgIC8vIOiuvue9rm9wZW7kuLpmYWxzZSzooajnpLrlhbPpl63mqKHmgIHmoYYKICAgICAgdGhpcy5vcGVuID0gZmFsc2U7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["type.vue"],"names":[],"mappings":"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","sourcesContent":["<!--字典类型页面-->\n<template>\n  <div class=\"app-container\">\n    <!--查询条件开始-->\n    <!--\n      ref:\n      model:绑定查询条件部分的数据绑定,与queryParams有关,点击查询按钮时,将查询参数传递到后台\n      inline:变为行内域\n      label-width:设置每个标签的宽度,指定在el-form上时,其直接子标签form-item会继承该值\n    -->\n    <el-form ref=\"queryForm\" :model=\"queryParams\" :inline=\"true\" label-width=\"68px\">\n      <el-form-item label=\"字典名称\" prop=\"dictName\">\n        <!--input输入框\n          v-model:指定与queryParams中哪个属性进行动态绑定\n          placeholder:输入框内默认填充的数据,获得焦点后消失\n          clearable:是否可以一键清除\n          size:输入框大小,影响内容大小\n        -->\n        <el-input\n          v-model=\"queryParams.dictName\"\n          placeholder=\"请输入字典名称\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        />\n      </el-form-item>\n      <el-form-item label=\"字典类型\" prop=\"dictType\">\n        <el-input\n          v-model=\"queryParams.dictType\"\n          placeholder=\"请输入字典类型\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        />\n      </el-form-item>\n      <el-form-item label=\"状态\" prop=\"status\">\n        <!--select下拉框-->\n        <el-select\n          v-model=\"queryParams.status\"\n          placeholder=\"字典状态\"\n          clearable\n          size=\"small\"\n          style=\"width:140px\"\n        >\n          <!--下拉框内容,遍历statusOptions属性,这里面保存了查询的状态的码表\n            key:唯一标注\n            label:标签\n            value:实际存储的值\n          -->\n          <el-option\n            v-for=\"dict in statusOptions\"\n            :key=\"dict.dictValue\"\n            :label=\"dict.dictLabel\"\n            :value=\"dict.dictValue\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"创建时间\">\n        <!--date-picker:日期选择框\n          value-format:日期格式\n          type:类型,这里是可以选取范围数据\n          range-separator:分隔符,页面显示中会把开始日期和结束日期用该符号分割开\n          start-placeholder:第一个空的默认显示内容\n          end-placeholder:第二个空的默认显示内容\n        -->\n        <el-date-picker\n          v-model=\"dateRange\"\n          size=\"small\"\n          style=\"width:280px\"\n          value-format=\"yyyy-MM-dd\"\n          type=\"daterange\"\n          range-separator=\"至\"\n          start-placeholder=\"开始日期\"\n          end-placeholder=\"结束日期\"\n        />\n      </el-form-item>\n      <el-form-item>\n        <!--查询和清空按钮-->\n        <el-button type=\"primary\" icon=\"el-icon-search\" size=\"mini\" @click=\"handleQuery\">查询</el-button>\n        <el-button type=\"primary\" icon=\"el-icon-refresh\" size=\"mini\" @click=\"resetQuery\">清空</el-button>\n      </el-form-item>\n    </el-form>\n    <!--查询条件结束-->\n    <!--操作栏按钮开始-->\n    <!--el-row:表示一行数据\n      gutter:每一栏之间的间隔\n    -->\n    <el-row :gutter=\"10\" style=\"margin-bottom: 8px;\">\n      <!--el-col:表示一列\n        span:指定该列所占的宽度,最大指定为24\n      -->\n      <el-col :span=\"1.5\">\n        <!--新增按钮:尺寸mini-->\n        <el-button type=\"primary\" icon=\"el-icon-plus\" size=\"mini\" @click=\"handleAdd\">新增</el-button>\n      </el-col>\n      <el-col :span=\"1.5\">\n        <!--修改按钮:只有在选中一条记录的时候,才会处于可用状态-->\n        <el-button type=\"success\" icon=\"el-icon-edit\" size=\"mini\" :disabled=\"single\" @click=\"handleUpdate\">修改</el-button>\n      </el-col>\n      <el-col :span=\"1.5\">\n        <!--删除按钮,只要有选中数据就可用,不管一条还是多条-->\n        <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" :disabled=\"multiple\" @click=\"handleDelete\">删除</el-button>\n      </el-col>\n      <el-col :span=\"1.5\">\n        <!--同步缓存按钮-->\n        <el-button type=\"warning\" icon=\"el-icon-refresh\" size=\"mini\" @click=\"handleCacheAsync\">同步最新数据到缓存</el-button>\n      </el-col>\n    </el-row>\n    <!--操作栏按钮结束-->\n    <!--数据列表开始-->\n    <!--el-table:数据列表\n      v-loading:v-loading在接口未请求到数据之前，显示加载中，直到请求到数据后消失\n      border:表示有边框\n      data:数据列表中显示的数据从哪获取\n      @selection-change:当选择项发生变化时会触发该事件\n    -->\n    <el-table v-loading=\"loading\" border :data=\"dictTypeTableList\" @selection-change=\"handleSelectionChnage\">\n      <!--el-table-column:每一行中的每一列\n        prop:对应从:data中取出的数据\n        align:对齐方式\n        label:列名\n        show-overflow-tooltip:默认情况下数据过长不够显示的时候是换行显示,如果需要单行显示,可以使用这个,并且当鼠标移动到此处时会显示tooltip\n      -->\n      <el-table-column type=\"selection\" width=\"55\" align=\"center\" />\n      <el-table-column label=\"字典编号\" prop=\"dictId\" align=\"center\" />\n      <el-table-column label=\"字典名称\" prop=\"dictName\" align=\"center\" :show-overflow-tooltip=\"true\" />\n      <el-table-column label=\"字典类型\" prop=\"dictType\" align=\"center\" :show-overflow-tooltip=\"true\">\n        <!--字典类型  slot-scope=\"scope\" 来取得作用域插槽:data绑定的数据-->\n<!--        <template slot-scope=\"scope\">-->\n<!--          &lt;!&ndash;动态绑定字典类型点击时所触发的操作,跳转路由,并携带该条数据的编号&ndash;&gt;-->\n<!--          <router-link :to=\"'/dict/data/' + scope.row.dictId\" class=\"link-type\">-->\n<!--            <span>{{ scope.row.dictType }}</span>-->\n<!--          </router-link>-->\n<!--        </template>-->\n      </el-table-column>\n      <!--formatter:用于按照指定要求来格式化此处需要显示的值,显示在列表中的数据是经过statusFormatter处理后的内容-->\n      <el-table-column label=\"状态\" prop=\"status\" align=\"center\" :formatter=\"statusFormatter\" />\n      <el-table-column label=\"备注\" prop=\"remark\" align=\"center\" :show-overflow-tooltip=\"true\" />\n      <el-table-column label=\"创建时间\" prop=\"createTime\" align=\"center\" width=\"180\" />\n      <el-table-column label=\"操作\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <!--传递该条数据到具体处理方法中-->\n          <el-button type=\"text\" icon=\"el-icon-edit\" size=\"mini\" @click=\"handleUpdate(scope.row)\">修改</el-button>\n          <el-button type=\"text\" icon=\"el-icon-delete\" size=\"mini\" @click=\"handleDelete(scope.row)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <!--数据列表结束-->\n    <!--底部分页开始-->\n    <!--pagination:分页控件\n      v-show:控制是否显示分页控件的条件,当数据列表中数据不为空才显示\n      current-page:当前显示第几页\n      page-sizes:可选的每页显示条数\n      page-size:默认每页显示条数\n      layout:设置分页格式:总数,每页条数,前一页,当前页,下一页,跳转至某一页\n      total:总数\n      @size-change:改变每页显示条数后触发方法\n      @current-change:当前页发生改变的时候触发的方法\n    -->\n    <el-pagination\n      v-show=\"total>0\"\n      :current-page=\"queryParams.pageNum\"\n      :page-sizes=\"[5, 10, 20, 30]\"\n      :page-size=\"queryParams.pageSize\"\n      layout=\"total, sizes, prev, pager, next, jumper\"\n      :total=\"total\"\n      @size-change=\"handleSizeChange\"\n      @current-change=\"handleCurrentChange\"\n    />\n    <!--底部分页结束-->\n    <!--新增和修改模态框开始-->\n    <!--dialog:对话框\n      title:模态框标题\n      visible.sync:表示是否显示\n      center:居中\n      append-to-body:如果需要在一个对话框内部嵌套另一个对话框，需要使用append-to-body属性\n    -->\n    <el-dialog\n      :title=\"title\"\n      :visible.sync=\"open\"\n      width=\"500px\"\n      center\n      append-to-body\n    >\n      <!--添加和修改的表单\n        rules:做表单数据前端校验\n        label-width:标签宽度(文字)\n      -->\n      <el-form ref=\"form\" :model=\"form\" :rules=\"rules\" label-width=\"80px\">\n        <el-form-item label=\"字典名称\" prop=\"dictName\">\n          <el-input v-model=\"form.dictName\" placeholder=\"请输入字典名称\" clearable size=\"small\" />\n        </el-form-item>\n        <el-form-item label=\"字典类型\" prop=\"dictType\">\n          <el-input v-model=\"form.dictType\" placeholder=\"请输入字典类型\" clearable size=\"small\" />\n        </el-form-item>\n        <el-form-item label=\"状态\" prop=\"status\">\n          <!--单选框-->\n          <el-radio-group v-model=\"form.status\">\n            <el-radio\n              v-for=\"dict in statusOptions\"\n              :key=\"dict.dictValue\"\n              :label=\"dict.dictValue\"\n              :value=\"dict.dictValue\"\n            >{{ dict.dictLabel }}</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"备注\" prop=\"remark\">\n          <el-input v-model=\"form.remark\" type=\"textarea\" placeholder=\"请输入字典备注\" clearable size=\"small\" />\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"handleSubmit\">保 存</el-button>\n        <el-button @click=\"cancel\">取 消</el-button>\n      </span>\n    </el-dialog>\n    <!--新增和修改模态框结束-->\n  </div>\n</template>\n\n<script>\n// 引入字典类型相关api\nimport { listForPage, addDictType, updateDictType, getDictTypeById, deleteDictTypeByIds, dictCacheAsync } from '@/api/system/dict/type'\nexport default {\n  name: 'Type',\n  data() {\n    return {\n      // 是否启用遮罩层,请求后台时出现进度条(如果请求响应很快的话,可能看不到)\n      loading: false,\n      // 选中的字典类型的id集合\n      ids: [],\n      // 判断是否选中了单条记录,进而控制一些页面行为,比如选中了单个可以进行修改操作\n      single: true,\n      // 判断是否选中了多条记录,进行控制一些页面行为,比如选中了多个可以进行批量删除操作\n      multiple: true,\n      // 分页数据总条数\n      total: 0,\n      // 数据列表中数据(字典类型)\n      dictTypeTableList: [],\n      // 模态框的标题\n      title: '',\n      // 是否显示模态框\n      open: false,\n      // 查询条件中状态的码表(正常,停用)\n      statusOptions: [],\n      // 查询条件中选择的日期范围数据\n      dateRange: [],\n      // 查询参数\n      queryParams: {\n        pageNum: 1, // 默认第一页\n        pageSize: 10, // 每页默认10条\n        dictName: undefined, // 不筛选字典名称\n        dictType: undefined, // 不筛选字典类型\n        status: undefined // 字典类型的状态\n      },\n      // 表单数据(添加和修改的模态框中的数据)\n      form: {},\n      // 表单校验(前端校验,失去焦点就会触发)\n      rules: {\n        // 字典名称\n        dictName: [\n          { required: true, message: '字典名称不能为空', trigger: 'blur' }\n        ],\n        // 字典类型\n        dictType: [\n          { required: true, message: '字典类型不能为空', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  // 生命周期,钩子函数  在实例创建完成后被立即调用\n  created() {\n\n  },\n  methods: {\n    // 查询操作\n    handleQuery() {\n      console.log(this.queryParams)\n      // 执行实际的查询方法\n      // this.getDictTypeList()\n    },\n    // 清空查询条件操作\n    resetQuery() {\n      console.log(this.queryParams)\n      // 清空查询数据\n      // this.resetForm('queryForm')\n      // 清空查询条件中选择的日期数据\n      // this.dateRange = []\n      // 重新查询数据列表,相当于执行一次无查询条件的查询操作,如果不调用这个方法,那么清空操作后,数据列表不会同步改变\n      // this.getDictTypeList()\n    },\n    // 添加操作,打开添加模态框\n    handleAdd() {\n      // 打开模态框\n      this.open = true\n    },\n    // 修改操作,打开修改模态框\n    handleUpdate(row) {\n    },\n    // 删除操作(含批量)\n    handleDelete(row) {\n    },\n    // 缓存同步\n    handleCacheAsync() {\n    },\n    // 改变数据列表第一列多选框选中状态所触发的方法,selection为选择的内容\n    handleSelectionChnage(selection) {\n    },\n    // 转换字典数据(code值与实际显示值)\n    statusFormatter(row) {\n      return row.status\n    },\n    // 改变每页显示条数的时候触发\n    handleSizeChange(val) {\n    },\n    // 当前页改变时触发(前一页,点击某一页,下一页,跳转某一页)\n    handleCurrentChange(val) {\n    },\n    // 模态框  保存按钮\n    handleSubmit() {\n    },\n    // 模态框  取消按钮\n    cancel() {\n      // 设置open为false,表示关闭模态框\n      this.open = false\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"],"sourceRoot":"src/views/system/dict"}]}